package com.xht.androidnote.module.dsa.arithmetic.greedy;

/**
 * 贪心算法
 *
 *
 * （1）建立数学模型来描述问题。
 * （2）把求解的问题分成若干个子问题。
 * （3）对每一子问题求解，得到子问题的局部最优解。
 * （4）把子问题的局部最优解合成原来问题的一个解。
 *
 *
 *  贪心算法可以简单描述为：大事化小，小事化了。对于一个较大的问题，通过找到与子问题的重叠，
 *  把复杂的问题划分为多个小问题。并且对于每个子问题的解进行选择，找出最优值，进行处理，
 *  再找出最优值，再处理。也就是说贪心算法是一种在每一步选择中都采取在当前状态下最好或最优的选择，
 *  从而希望得到结果是最好或最优的算法。
 *
 * 贪心算法在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，
 * 所做出的仅是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，
 * 但对范围相当广泛的许多问题他能产生整体最优解或者是整体最优解的近似解。
 */
public class Test1 {

    public static void main(String[] args) {

        Test1 test1 = new Test1();
        int num = test1.solve(456);

        System.out.println("需要的张数=" + num);
    }


    int N = 5;
    int[] count = new int[]{5, 2, 2, 3, 5};
    int[] value = new int[]{1, 5, 10, 50, 100};

    /*
        小明手中有 1，5，10，50，100 五种面额的纸币，每种纸币对应张数分别为 5，2，2，3，5 张。
        若小明需要支付 456 元，则需要多少张纸币？

        （1）建立数学模型
          设小明每次选择纸币面额为 Xi ，需要的纸币张数为 n 张，剩余待支付金额为 V ，则有：
        X1 + X2 + … + Xn = 456.
        （2）问题拆分为子问题
          小明选择纸币进行支付的过程，可以划分为n个子问题：即每个子问题对应为：
        在未超过456的前提下，在剩余的纸币中选择一张纸币。
        （3）制定贪心策略，求解子问题

        制定的贪心策略为：在允许的条件下选择面额最大的纸币。则整个求解过程如下：

        选取面值为 100 的纸币，则 X1 = 100, V = 456 – 100 = 356；

        继续选取面值为 100 的纸币，则 X2 = 100, V = 356 – 100 = 256；

        继续选取面值为 100 的纸币，则 X3 = 100, V = 256 – 100 = 156；

        继续选取面值为 100 的纸币，则 X4 = 100, V = 156 – 100 = 56；

        选取面值为 50 的纸币，则 X5 = 50, V = 56 – 50 = 6；

        选取面值为 5 的纸币，则 X6 = 5, V = 6 – 5 = 1；

        选取面值为 1 的纸币，则 X7 = 1, V = 1 – 1 = 0；求解结束

        （4）将所有解元素合并为原问题的解

        小明需要支付的纸币张数为 7 张，其中面值 100 元的 4 张，50 元 1 张，5 元 1 张，1 元 1 张。



        因为有五种面额的纸币，所以设定 N=5，从最大开始比较，所以是i--，
        从面额最大的100开始，取余数，即有多少张100，然后和面额为100的纸币的张数进行比较，
        取两者最小值，
        然后将金额减去之前的金额，然后继续和后面面额的纸币进行比较，最后得出所需的总数
     */
    public int solve(int money) {
        int num = 0;

        for (int i = N - 1; i >= 0; i--) {
            int c = Math.min(money / value[i], count[i]);
            money = money - c * value[i];
            num += c;
        }

        if (money > 0) {
            num = -1;
        }

        return num;
    }


}
